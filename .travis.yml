os: linux
language: python
python:
  - 2.7
  - 3.4
  - 3.5
  - 3.6
  - 3.7
  - 3.8

git:
  depth: 5

addons:
  apt:
    packages:
    - xorg-dev  

stages:
  - name: test
  # Only execute deployment stage on tagged commits, and from your repository
  # (e.g. not PRs). Replace with your repo name.
  - name: build
  - name: deploy
    #if: repo = nmwsharp/polyscope-py
    # To only build tags that look like vX.Y.Z:
    if: repo = nmwsharp/polyscope-py AND tag =~ ^v\d+\.\d+\.\d+$
    #if: tag IS PRESENT AND repo = nmwsharp/polyscope-py
      
env:
  global:
    - TWINE_USERNAME=__token__
    # Note: TWINE_PASSWORD is set to a PyPI API token in Travis settings
    - CIBW_TEST_COMMAND: "'python {project}/test/polyscope_test.py backend=openGL_mock'"
    - CIBW_SKIP: "'pp27-win32 pp36-win32'"
    - CIBW_BEFORE_BUILD_LINUX : "'yum remove -y cmake && yum install -y cmake3 libX11-devel libXcursor-devel libXrandr-devel libXinerama-devel mesa-libGL-devel libXi-devel freeglut-devel && ln -sfn /usr/bin/cmake3 /usr/bin/cmake'"
        

before_script:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install -y xpra xserver-xorg-video-dummy freeglut3-dev; fi

script:
  - python setup.py install
  - python test/polyscope_test.py

# NOTE: build & deploy stages should be identical, except that deploy uploads after building. Any changes made to either should be made to both. This ensures that uploads will only be performed if all builds succeeded.


# See https://docs.travis-ci.com/user/languages/python/#running-python-tests-on-multiple-operating-systems
# for some annoying subtle details about cross OS python (here and below)
before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" = windows ]]; then
        choco install python --version 3.8.0
        export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
        # make sure it's on PATH as 'python'
        ln -s /c/Python38/python.exe /c/Python38/python3.exe
    fi

jobs:
  include:

    # Build source distribution
    - stage: build  
      name: Build source distribution
      os: linux
      language: python
      python: 3.7
      install: skip
      # if the build has a tag, it must match setup.py
      before_script: |
        [[ "$TRAVIS_TAG" ==  "" ]] || [[ "$TRAVIS_TAG" == "v$(python setup.py --version)" ]]
      script:
        - python3 -m pip install setuptools
        - python3 setup.py sdist --formats=gztar
        
    # Build on linux
    - stage: build 
      name: Build Linux wheels
      os: linux
      language: python
      python: 3.7
      services: docker
      install: python3 -m pip install cibuildwheel==1.3.0
      script: python3 -m cibuildwheel --output-dir wheelhouse
        
    # Build on mac
    - stage: build 
      name: Build macOS wheels
      os: osx
      osx_image: xcode11.2  
      language: shell       
      install: python3 -m pip install cibuildwheel==1.3.0
      script: python3 -m cibuildwheel --output-dir wheelhouse

    # Build on windows
    - stage: build 
      name: Build Windows wheels
      os: windows
      language: shell
      install: python3 -m pip install cibuildwheel==1.3.0
      script: python3 -m cibuildwheel --output-dir wheelhouse
   
    # Deploy on linux
    # Also deploy source here. Otherwise source gets uploaded much earlier 
    # than the first binary, which is annoying.
    - stage: deploy
      name: Build and deploy Linux wheels & source
      os: linux
      language: python
      python: 3.7
      services: docker
      install: 
        - python3 -m pip install cibuildwheel==1.3.0
        - python3 -m pip install setuptools
      script: 
        - python3 setup.py sdist --formats=gztar
        - python3 -m cibuildwheel --output-dir wheelhouse
      after_success:
        - python3 -m pip install twine
        - python3 -m twine upload --skip-existing dist/*.tar.gz 
        - python3 -m twine upload --skip-existing wheelhouse/*.whl
    
    # Deploy on mac
    - stage: deploy
      name: Build and deploy macOS wheels
      os: osx
      osx_image: xcode11.2  
      language: shell       
      install: python3 -m pip install cibuildwheel==1.3.0
      script: python3 -m cibuildwheel --output-dir wheelhouse
      after_success:
        - python3 -m pip install twine
        - python3 -m twine upload --skip-existing wheelhouse/*.whl
        
    # Deploy on windows
    - stage: deploy
      name: Build and deploy Windows wheels
      os: windows
      language: shell
      install: python3 -m pip install cibuildwheel==1.3.0
      script: python3 -m cibuildwheel --output-dir wheelhouse
      after_success:
        - python3 -m pip install twine
        - python3 -m twine upload --skip-existing wheelhouse/*.whl
